job-create:
  handler: src/modules/job/create.handler
  iamRoleStatementsName: ${self:custom.stackname}-job-create
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:PutItem
      Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.stackname}-main'
  timeout: 10
  memorySize: 128
  reservedConcurrency: 5
  events:
    - http:
        method: POST
        path: /job/create
        authorizer: aws_iam # If we submit the IAM user's access keys through the Federated IdentitiesUser Pools
        # authorizer:
        #   type: COGNITO_USER_POOLS
        #   authorizerId:
        #     Ref: ApiGatewayAuthorizer
        cors: true
  package:
    include:
      - src/job/**

job-update:
  handler: src/modules/job/update.handler
  iamRoleStatementsName: ${self:custom.stackname}-job-update
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:UpdateItem
      Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.stackname}-main'
  timeout: 10
  memorySize: 128
  reservedConcurrency: 5
  events:
    - http:
        method: PUT
        path: /job/update/{relation}
        authorizer: aws_iam # If we submit the IAM user's access keys through the Federated IdentitiesUser Pools
        # authorizer:
        #   type: COGNITO_USER_POOLS
        #   authorizerId:
        #     Ref: ApiGatewayAuthorizer
        cors: true
  package:
    include:
      - src/job/**

job-delete:
  handler: src/modules/job/delete.handler
  iamRoleStatementsName: ${self:custom.stackname}-job-delete
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:DeleteItem
      Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.stackname}-main'
  timeout: 10
  memorySize: 128
  reservedConcurrency: 5
  events:
    - http:
        method: DELETE
        path: /job/delete/{relation}
        authorizer: aws_iam # If we submit the IAM user's access keys through the Federated IdentitiesUser Pools
        # authorizer:
        #   type: COGNITO_USER_POOLS
        #   authorizerId:
        #     Ref: ApiGatewayAuthorizer
        cors: true
  package:
    include:
      - src/job/**

job-list:
  handler: src/modules/job/list.handler
  iamRoleStatementsName: ${self:custom.stackname}-job-list
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:Query
      Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.stackname}-main'
  timeout: 10
  memorySize: 128
  reservedConcurrency: 5
  events:
    - http:
        method: GET
        path: /job/list/{relation}
        authorizer: aws_iam # If we submit the IAM user's access keys through the Federated IdentitiesUser Pools
        # authorizer:
        #   type: COGNITO_USER_POOLS
        #   authorizerId:
        #     Ref: ApiGatewayAuthorizer
        cors: true
  package:
    include:
      - src/job/**

job-detail:
  handler: src/modules/job/detail.handler
  iamRoleStatementsName: ${self:custom.stackname}-job-detail
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:GetItem
      Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.stackname}-main'
  timeout: 10
  memorySize: 128
  reservedConcurrency: 5
  events:
    - http:
        method: GET
        path: /job/detail/{relation}
        authorizer: aws_iam # If we submit the IAM user's access keys through the Federated IdentitiesUser Pools
        # authorizer:
        #   type: COGNITO_USER_POOLS
        #   authorizerId:
        #     Ref: ApiGatewayAuthorizer
        cors: true
  package:
    include:
      - src/job/**
