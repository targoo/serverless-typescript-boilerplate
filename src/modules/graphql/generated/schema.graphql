### This file was generated by Nexus Schema
### Do not make changes to this file directly

type Autho0User {
  email: String!
  email_verified: Boolean!
  jwt: String!
  name: String
  nickname: String
  picture: String
  state: String!
  sub: String!

  """
  the unique user ID
  """
  uuid: ID!
}

"""
Board
"""
type Board {
  availableDate: Date
  createdAt: DateTime!
  description: String
  educationLevel: EducationLevel
  files: [File!]!
  followers: [User!]!

  """
  Internal partition key
  """
  id: ID!
  interestLevel: InterestLevel
  isDeleted: Boolean!
  isOwner: Boolean
  location: String
  locationCoordinates: JSON
  locationMain: String
  locationSecondary: String
  permissions: [String!]!

  """
  Internal sort key
  """
  relation: ID!
  title: String!
  updatedAt: DateTime
  user: User!

  """
  UUID of the board
  """
  uuid: ID!
  workRightEU: Boolean
  workRightUK: Boolean
}

input BoardInputData {
  availableDate: Date
  description: String
  educationLevel: EducationLevel
  interestLevel: InterestLevel
  isDeleted: Boolean
  location: String
  locationCoordinates: JSON
  locationMain: String
  locationSecondary: String
  title: String!
  workRightEU: Boolean
  workRightUK: Boolean
}

input BoardInputSort {
  direction: SortDirection
  field: String
}

input BoardInputWhere {
  isDeleted: Boolean
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

enum EducationLevel {
  A_LEVELS_GNVQ
  BTEC
  CITY_GUILDS
  DIPLOMA
  GCSE_GNVQ_O_LEVELS
  HND_HNC
  MASTER_DEGREE_OR_HIGHER
  PHD
  SENIOR_BUSINESS_TECH_QUALIFICATION
  UNIVERSITY_DEGREE
}

input EmailInputData {
  email: String!
  emailTemplate: EmailTemplate!
  params: JSON
  replyTo: String
  subject: String!
}

enum EmailTemplate {
  INVITE_BOARD_AGENT
  INVITE_JOB_AGENT
}

enum EmploymentType {
  CONTRACT
  INTERNSHIP
  PERMANENT_FULL_TIME
  PERMANENT_PART_TIME
  TEMPORARY
}

"""
Event
"""
type Event {
  createdAt: DateTime!
  description: String!
  endAt: DateTime!
  isDeleted: Boolean!
  startAt: DateTime!
  type: EventType!
  updatedAt: DateTime

  """
  UUID of the board
  """
  uuid: ID!
}

input EventInputData {
  description: String
  endAt: DateTime
  startAt: DateTime
  type: EventType
}

input EventInputWhere {
  boardUuid: ID!
  isDeleted: Boolean
  jobUuid: ID!
}

enum EventType {
  FACE2FACE
  PHONE_CALL
  VIDEO_CALL
}

enum Feeling {
  ECSTATIC
  HAPPY
  NORMAL
  SAD
}

type File {
  createdAt: DateTime!
  encoding: String!
  filename: String!
  isDeleted: Boolean!
  mimetype: MimeType!
  resource: String!
  temporaryUrl: String!
  updatedAt: DateTime

  """
  UUID of the job
  """
  uuid: ID!
}

enum InterestLevel {
  ACTIVELY_LOOKING
  JUST_BROWSING
  OPEN_TO_OPPORTUNITY
}

"""
Job
"""
type Job {
  agencyName: String
  agentEmail: String
  agentName: String
  agentPhone: String
  board: Board!
  company: String
  companyLocation: String
  companyLocationCoordinates: JSON
  companyLocationMain: String
  companyLocationSecondary: String
  companyWebsite: String
  createdAt: DateTime!
  createdBy: User!
  duration: String
  employmentType: EmploymentType
  events: [Event!]
  feeling: Feeling!
  followers: [User!]!

  """
  Internal partition key
  """
  id: ID!
  ir35: Boolean
  isDeleted: Boolean!
  jobDescription: String
  jobTitle: String
  jobUrl: String
  permissions: [String!]!
  rate: String
  referralFee: String

  """
  Internal sort key
  """
  relation: ID!
  remoteOption: RemoteOption
  status: JobStatus!
  updatedAt: DateTime
  user: User!

  """
  UUID of the job
  """
  uuid: ID!
}

input JobInputData {
  agencyName: String
  agentEmail: String
  agentName: String
  agentPhone: String
  company: String
  companyLocation: String
  companyLocationCoordinates: JSON
  companyLocationMain: String
  companyLocationSecondary: String
  companyWebsite: String
  duration: String
  employmentType: EmploymentType
  feeling: Feeling
  ir35: Boolean
  isDeleted: Boolean
  jobDescription: String
  jobTitle: String
  jobUrl: String
  rate: String
  referralFee: String
  remoteOption: RemoteOption
  status: JobStatus
}

input JobInputWhere {
  boardUuid: ID!
  isDeleted: Boolean
  userUuid: ID!
}

enum JobStatus {
  ARCHIVED
  FACE2FACE
  FIRST_STAGE_INTERVIEW
  LAST_STAGE_INTERVIEW
  OFFER
  PHONE_CALL
  SECOND_STAGE_INTERVIEW
  STARTED
  TECH_TEST
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

enum MimeType {
  DOC
  FILE
  PDF
}

type Mutation {
  archiveBoard(boardUuid: ID!, isDeleted: Boolean): Board!
  archiveBoardFile(boardUuid: ID!, fileUuid: ID!, isDeleted: Boolean): File!
  archiveJob(boardUuid: ID!, isDeleted: Boolean, jobUuid: ID!): Job!
  createBoard(data: BoardInputData!): Board!
  createEvent(boardUuid: ID!, data: EventInputData!, jobUuid: ID!, userUuid: ID!): Event!
  createJob(boardUuid: ID!, data: JobInputData!, userUuid: ID!): Job!
  inviteUserOnBoard(boardUuid: ID!, data: EmailInputData!, userUuid: ID!): Boolean!
  inviteUserOnJob(boardUuid: ID!, data: EmailInputData!, jobUuid: ID!, userUuid: ID!): Boolean!
  logout: Boolean!
  multipleUpload(boardUuid: ID, files: [Upload!]!, jobUuid: ID): [File!]!
  passwordlessSignIn(email: String!, redirectUri: String!, state: String!): Boolean!
  signInConfirm(accessToken: String!, state: String!): Autho0User!
  singleUpload(file: Upload!): File!
  unfollowBoard(boardUuid: ID!, followerUserUuid: ID!, userUuid: ID!): Boolean!
  updateBoard(boardUuid: ID!, data: BoardInputData!): Board!
  updateJob(boardUuid: ID!, data: JobInputData!, jobUuid: ID!, userUuid: ID!): Job!
  updateUser(data: UserInputData!): User!
}

type Query {
  board(
    """
    The unique id of the board
    """
    boardUuid: ID!

    """
    The unique id of the user
    """
    userUuid: ID!
  ): Board!
  boards(sort: BoardInputSort, where: BoardInputWhere): [Board!]!
  followingBoards(sort: BoardInputSort): [Board!]!
  hello(name: String): String!
  job(
    """
    The id of the board
    """
    boardUuid: ID!

    """
    The id of the job
    """
    jobUuid: ID!

    """
    The id of the user
    """
    userUuid: ID!
  ): Job!
  jobs(where: JobInputWhere!): [Job!]!
  me: User!
}

enum RemoteOption {
  FLEXIBLE
  FOURDAYS
  FULLY_REMOTE
  NO_REMOTE
  ONEDAY
  THREEDAYS
  TWODAYS
}

enum SortDirection {
  ASC
  DESC
}

"""
A time string at UTC, such as 10:15:30Z, compliant with the `full-time` format outlined in section 5.6 of the RFC 3339profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Time

"""
Upload custom scalar type - fixed
"""
scalar Upload

type User {
  createdAt: DateTime!
  email: String!
  isDeleted: Boolean!
  isEmailVerified: Boolean!
  name: String
  nickname: String
  state: String
  updatedAt: DateTime

  """
  Unique Id of the user based on the email
  """
  uuid: ID!
}

input UserInputData {
  nickname: String
}
