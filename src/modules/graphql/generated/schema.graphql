### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Autho0User {
  email: String
  email_verified: Boolean
  jwt: String!
  name: String
  nickname: String
  picture: String

  """UUID of the user (Auth0 Sub)"""
  uuid: ID!
}

"""Board"""
type Board {
  availableDate: Date
  createdAt: DateTime!
  description: String
  file: String
  isDeleted: Boolean!
  location: String
  title: String!
  updatedAt: DateTime

  """UUID of the board"""
  uuid: ID!
}

input BoardInputData {
  availableDate: Date
  description: String
  file: String
  isDeleted: Boolean
  location: String
  title: String!
}

input BoardInputWhere {
  isDeleted: Boolean
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

enum EmploymentType {
  CONTRACT
  PERMANENT
}

"""Event"""
type Event {
  createdAt: DateTime!
  date: DateTime!
  description: String!
  isDeleted: Boolean!
  type: EventType!
  updatedAt: DateTime

  """UUID of the board"""
  uuid: ID!
}

input EventInputData {
  date: DateTime
  description: String
  type: EventType
}

input EventInputWhere {
  boardUuid: ID!
  isDeleted: Boolean
  jobUuid: ID!
}

enum EventType {
  CALL
  FACE2FACE
  ONLINETEST
  VIDEOCALL
}

enum Feeling {
  ECSTATIC
  HAPPY
  NORMAL
  SAD
}

type File {
  encoding: String!
  filename: String!
  mimetype: String!
  resource: String!
}

"""Job"""
type Job {
  agencyName: String
  agentEmail: String
  agentName: String
  agentPhone: String
  company: String
  companyLocation: String
  companyWebsite: String
  createdAt: DateTime!
  duration: String
  employmentType: EmploymentType
  feeling: Feeling!
  ir35: Boolean
  isDeleted: Boolean!
  jobDescription: String
  jobTitle: String
  rate: String
  status: JobStatus!
  updatedAt: DateTime

  """UUID of the job"""
  uuid: ID!
}

input JobInputData {
  agencyName: String
  agentEmail: String
  agentName: String
  agentPhone: String
  company: String
  companyLocation: String
  companyWebsite: String
  duration: String
  employmentType: EmploymentType
  feeling: Feeling
  ir35: Boolean
  isDeleted: Boolean
  jobDescription: String
  jobTitle: String
  rate: String
  status: JobStatus
}

input JobInputWhere {
  boardUuid: ID!
  isDeleted: Boolean
}

enum JobStatus {
  ACTIVE
  ARCHIVED
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  archiveBoard(uuid: ID!): Board!
  archiveJob(boardUuid: ID!, uuid: ID!): Job!
  createBoard(data: BoardInputData!): Board!
  createJob(boardUuid: ID!, data: JobInputData!): Job!
  passwordlessSignIn(email: String!, redirectUri: String!): Boolean!
  passwordlessSignInConfirm(accessToken: String!, state: String!): Autho0User!
  singleUpload(file: Upload!): File!
  updateBoard(data: BoardInputData!, uuid: ID!): Board!
  updateJob(boardUuid: ID!, data: JobInputData!, uuid: ID!): Job!
  updateUser(data: UserInputData!): User!
}

type Query {
  board(
    """The unique id of the board"""
    uuid: ID!
  ): Board!
  boards(where: BoardInputWhere): [Board!]!
  hello(name: String): String!
  job(
    """The id of the board"""
    boardUuid: ID!

    """The id of the job"""
    uuid: ID!
  ): Job!
  jobs(where: JobInputWhere!): [Job!]!
  me: User!
}

"""
A time string at UTC, such as 10:15:30Z, compliant with the `full-time` format outlined in section 5.6 of the RFC 3339profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Time

"""Upload custom scalar type - fixed"""
scalar Upload

type User {
  createdAt: DateTime!
  email: String!
  isDeleted: Boolean!
  nickname: String!
  updatedAt: DateTime

  """UUID of the user (Cognito Sub)"""
  uuid: ID!
}

input UserInputData {
  name: String
}
