/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  BoardInput: {
    // input type
    title: string; // String!
  };
}

export interface NexusGenEnums {
  BoardStatus: 'ACTIVE' | 'ARCHIVED';
  JobStatus: 'ACTIVE' | 'ARCHIVED';
}

export interface NexusGenRootTypes {
  Board: {
    // root type
    isDeleted: boolean; // Boolean!
    title: string; // String!
    uuid: string; // ID!
  };
  Job: {
    // root type
    isDeleted: boolean; // Boolean!
    status: NexusGenEnums['JobStatus']; // JobStatus!
    title: string; // String!
    uuid: string; // ID!
  };
  Mutation: {};
  Query: {};
  User: {
    // root type
    email: string; // String!
    username: string; // String!
    uuid: string; // ID!
  };
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  BoardInput: NexusGenInputs['BoardInput'];
  BoardStatus: NexusGenEnums['BoardStatus'];
  JobStatus: NexusGenEnums['JobStatus'];
}

export interface NexusGenFieldTypes {
  Board: {
    // field return type
    isDeleted: boolean; // Boolean!
    jobs: NexusGenRootTypes['Job'][] | null; // [Job!]
    title: string; // String!
    uuid: string; // ID!
  };
  Job: {
    // field return type
    isDeleted: boolean; // Boolean!
    status: NexusGenEnums['JobStatus']; // JobStatus!
    title: string; // String!
    uuid: string; // ID!
  };
  Mutation: {
    // field return type
    archiveBoard: NexusGenRootTypes['Board']; // Board!
    createBoard: NexusGenRootTypes['Board']; // Board!
    updateBoard: NexusGenRootTypes['Board']; // Board!
  };
  Query: {
    // field return type
    boards: NexusGenRootTypes['Board'][]; // [Board!]!
    hello: string; // String!
  };
  User: {
    // field return type
    email: string; // String!
    username: string; // String!
    uuid: string; // ID!
  };
}

export interface NexusGenArgTypes {
  Mutation: {
    archiveBoard: {
      // args
      uuid: string; // ID!
    };
    createBoard: {
      // args
      input: NexusGenInputs['BoardInput']; // BoardInput!
    };
    updateBoard: {
      // args
      input: NexusGenInputs['BoardInput']; // BoardInput!
      uuid: string; // ID!
    };
  };
  Query: {
    boards: {
      // args
      isDeleted?: boolean | null; // Boolean
    };
    hello: {
      // args
      name?: string | null; // String
    };
  };
}

export interface NexusGenAbstractResolveReturnTypes {}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = 'Board' | 'Job' | 'Mutation' | 'Query' | 'User';

export type NexusGenInputNames = 'BoardInput';

export type NexusGenEnumNames = 'BoardStatus' | 'JobStatus';

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = 'Boolean' | 'Float' | 'ID' | 'Int' | 'String';

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes'];
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {}
  interface NexusGenPluginSchemaConfig {}
}
